#!/bin/bash

export CGO_ENABLED=0

PLATFORMS="darwin/386 darwin/amd64 darwin/arm64 dragonfly/amd64 freebsd/386 js/wasm linux/386 linux/amd64 linux/arm64 linux/mips linux/mips64 linux/mips64le linux/mipsle linux/ppc64 linux/ppc64le linux/riscv64 linux/s390x nacl/386 nacl/amd64p32 netbsd/386 netbsd/amd64  openbsd/386 openbsd/amd64 plan9/386 plan9/amd64 solaris/amd64 windows/386 windows/amd64"
PLATFORMS_ARM="linux darwin freebsd openbsd netbsd nacl plan9"
GO=go
type setopt >/dev/null 2>&1

SCRIPT_NAME=`basename "$0"`
FAILURES=""
SOURCE_FILE=`echo $@ | sed 's/\.go//'`
CURRENT_DIRECTORY=${PWD##*/}
OUTPUT=$PWD/build/KittehBotGo  # if no src file given, use current dir name

mkdir -pv $PWD/build

for PLATFORM in $PLATFORMS; do
  GOOS=${PLATFORM%/*}
  GOARCH=${PLATFORM#*/}
  BIN_FILENAME="${OUTPUT}-${GOOS}-${GOARCH}"
  if [[ "${GOOS}" == "windows" ]]; then BIN_FILENAME="${BIN_FILENAME}.exe"; fi
  if [[ "${GOOS}" == "js" ]]; then BIN_FILENAME="${BIN_FILENAME}.wasm"; fi
  CMD="GOOS=${GOOS} GOARCH=${GOARCH} ${GO} build -p 7 -v -ldflags '-s -w -extldflags \"-static\"' -o ${BIN_FILENAME} $@ && upx --lzma --best ${BIN_FILENAME}"
  echo "${CMD}"
  eval $CMD || FAILURES="${FAILURES} ${PLATFORM}"
done

  echo -e "\e[1m Finished building all regular platforms, now building ARM64 linux.\033[0m"

# ARM builds
if [[ $PLATFORMS_ARM == *"linux"* ]]; then
  CMD="GOOS=linux GOARCH=arm64 ${GO} build -p 7 -v -ldflags '-s -w -extldflags \"-static\"' -o ${OUTPUT}-linux-arm64 $@ && upx --lzma --best ${BIN_FILENAME}"
  echo "${CMD}"
  eval $CMD || FAILURES="${FAILURES} ${PLATFORM}"
fi

echo -e "\e[1m Finished building ARM64, now building ARM 6+7 linux.\033[0m"


for GOOS in $PLATFORMS_ARM; do
  GOARCH="arm"
  # build for each ARM version
  for GOARM in 7 6; do
    BIN_FILENAME="${OUTPUT}-${GOOS}-${GOARCH}${GOARM}"
    CMD="GOARM=${GOARM} GOOS=${GOOS} GOARCH=${GOARCH} ${GO} build -p 7 -v -ldflags '-s -w -extldflags \"-static\"' -o ${BIN_FILENAME} $@ && upx --lzma --best ${BIN_FILENAME}"
    echo "${CMD}"
    eval "${CMD}" || FAILURES="${FAILURES} ${GOOS}/${GOARCH}${GOARM}"
  done
done

# eval errors
if [[ "${FAILURES}" != "" ]]; then
  echo ""
  echo "${SCRIPT_NAME} failed on: ${FAILURES}"
  exit 1
fi
