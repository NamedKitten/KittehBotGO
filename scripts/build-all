#!/bin/bash

export CGO_ENABLED=0

PLATFORMS="linux/amd64 linux/386"
PLATFORMS="$PLATFORMS freebsd/amd64 freebsd/386"
PLATFORMS="$PLATFORMS netbsd/amd64 netbsd/386 "
PLATFORMS="$PLATFORMS openbsd/amd64 openbsd/386"

PLATFORMS_ARM="linux freebsd netbsd openbsd"

type setopt >/dev/null 2>&1

SCRIPT_NAME=`basename "$0"`
FAILURES=""
SOURCE_FILE=`echo $@ | sed 's/\.go//'`
CURRENT_DIRECTORY=${PWD##*/}
OUTPUT=$PWD/build/KittehBotGo  # if no src file given, use current dir name

mkdir -pv $PWD/build

STRIP="strip -S --strip-unneeded --remove-section=.note.gnu.gold-version --remove-section=.comment --remove-section=.note --remove-section=.note.gnu.build-id --remove-section=.note.ABI-tag"

for PLATFORM in $PLATFORMS; do
  GOOS=${PLATFORM%/*}
  GOARCH=${PLATFORM#*/}
  BIN_FILENAME="${OUTPUT}-${GOOS}-${GOARCH}"
  CMD="GOOS=${GOOS} GOARCH=${GOARCH} go build -p 7 -v -ldflags '-s -w -extldflags \"-static\"' -o ${BIN_FILENAME} $@ && $STRIP ${BIN_FILENAME} "
  echo "${CMD}"
  eval $CMD || FAILURES="${FAILURES} ${PLATFORM}"
done

# ARM builds
if [[ $PLATFORMS_ARM == *"linux"* ]]; then
  CMD="GOOS=linux GOARCH=arm64 go build -p 7 -v -ldflags '-s -w -extldflags \"-static\"' -o ${OUTPUT}-linux-arm64 $@ && $STRIP ${OUTPUT}-linux-arm64"
  echo "${CMD}"
  eval $CMD || FAILURES="${FAILURES} ${PLATFORM}"
fi
for GOOS in $PLATFORMS_ARM; do
  GOARCH="arm"
  # build for each ARM version
  for GOARM in 7 6; do
    BIN_FILENAME="${OUTPUT}-${GOOS}-${GOARCH}${GOARM}"
    CMD="GOARM=${GOARM} GOOS=${GOOS} GOARCH=${GOARCH} go build -p 7 -v -ldflags '-s -w -extldflags \"-static\"' -o ${BIN_FILENAME} $@ && $STRIP ${BIN_FILENAME}"
    echo "${CMD}"
    eval "${CMD}" || FAILURES="${FAILURES} ${GOOS}/${GOARCH}${GOARM}"
  done
done

# eval errors
if [[ "${FAILURES}" != "" ]]; then
  echo ""
  echo "${SCRIPT_NAME} failed on: ${FAILURES}"
  exit 1
fi
